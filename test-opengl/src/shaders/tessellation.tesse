#version 410 core

layout(triangles, equal_spacing, ccw) in;

struct TCSPatchOut{
	vec3 pos_003;
	vec3 pos_102;
	vec3 pos_201;
	vec3 pos_300;
	vec3 pos_210;
	vec3 pos_120;
	vec3 pos_030;
	vec3 pos_021;
	vec3 pos_012;
	vec3 pos_111;
	vec2 tex_coord[3];
	vec3 normal[3];
};
struct TESOut{
	vec2 tex_coord;
	vec3 w_normal;
	vec3 w_pos;
};

in patch TCSPatchOut tcs_out;
out TESOut tes_out;

uniform mat4 g_vp;

vec3 interpolate_3d(vec3 v0, vec3 v1, vec3 v2){
	return v0 * gl_TessCoord.x + v1 * gl_TessCoord.y + v2 * gl_TessCoord.z;
}

vec2 interpolate_2d(vec2 v0, vec2 v1, vec2 v2){
	return v0 * gl_TessCoord.x + v1 * gl_TessCoord.y + v2 * gl_TessCoord.z;
}

vec3 calc_position(float u, float v, float w){
	float u3 = pow(u, 3);
	float u2 = pow(u, 2);
	float v3 = pow(v, 3);
	float v2 = pow(v, 2);
	float w3 = pow(w, 3);
	float w2 = pow(w, 2);
	vec3 pos = u3 * tcs_out.pos_300 + v3 * tcs_out.pos_030 + w3 * tcs_out.pos_003 + 
			3 * u2 * v * tcs_out.pos_210 + 3 * u2 * w * tcs_out.pos_201 + 3 * u * v2 * tcs_out.pos_120 +
			3 * u * w2 * tcs_out.pos_102 + 3 * v2 * w * tcs_out.pos_021 + 3 * v * w2 * tcs_out.pos_012 +
			6 * u * w * v * tcs_out.pos_111;
	return pos;
}

void main(){
	tes_out.tex_coord = interpolate_2d(tcs_out.tex_coord[0], tcs_out.tex_coord[1], tcs_out.tex_coord[2]);
	vec3 w_normal = interpolate_3d(tcs_out.normal[0], tcs_out.normal[1], tcs_out.normal[2]);
	tes_out.w_normal = normalize(w_normal);
	tes_out.w_pos = calc_position(gl_TessCoord.x, gl_TessCoord.y, gl_TessCoord.z);

	gl_Position = g_vp * vec4(tes_out.w_pos, 1);
}